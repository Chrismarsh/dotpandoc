#!/usr/bin/env ruby
# If we have author: metadata, convert it to an
# "Authors" and Affiliations" paragraph at the start of the document
# This is because Word template cannot handle this natively

require 'paru/filter'

Paru::Filter.run do
  stop! unless metadata.key?('author')
  auth = metadata['author']
  text = '**Authors**: '
  addContribution = false
  if auth.is_a?(String)
    text += auth
  elsif auth.is_a?(Array)
    if auth[0].is_a?(Hash)
      auth.each_with_index do |au,i|
        unless au.keys.include?('name') #convert first key to name: key
          values = au.values[0]
          values['name'] = au.keys[0]
          auth[i]=values
        end
        text += au['name'].to_s
        if au.key?('affiliation')
          if au['affiliation'].is_a?(String) || au['affiliation'].is_a?(Fixnum)
            aff = au['affiliation'].to_s
            frag = ''
            a = aff.split(',') #comma seperated values
            a.each do |af|
              if af.match(/^\d+$/)
                frag += '^' + af + '^ '
              else
                frag += af + ''
              end
              text += frag + ' '
            end
          elsif au['affiliation'].is_a?(Array)
            frag = ''
            au['affiliation'].each do |af| 
              if af.to_s.match(/^\d+$/)
                frag += '^' + af.to_s + '^ '
              else
                frag += af.to_s
              end
            end
            text += frag[0..-2]
          end
        end
        if au.key?('correspondence')
          if au['email'].nil?
            text += ' <' + au['correspondence'].to_s + '>'
          else
            text += ' <' + au['email'].to_s + '>'
          end
        end
        if au.key?('equal_contributor')
          text += '†' 
          addContribution = true;
        end
        text += '  &  '
      end
      text = text[0..-6]
    else
      auth.each_index { |i| text += auth[i].to_s + '  &  ' }
      text = text[0..-6]
    end
  elsif auth[0].is_a?(Hash)
    text = 'HASH TODO'
  end
  stop! if text.length < 14
  if addContribution
    p = Paru::PandocFilter::Para.new([])
    p.inner_markdown = "† equal contribution"
    document.prepend(p)
  end
  p = Paru::PandocFilter::Para.new([])
  p.inner_markdown = text
  document.prepend(p)
  stop!
end
