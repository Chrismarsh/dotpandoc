#!/usr/bin/env ruby
# this converts an author metadata field
# author:  [name: ..., affiliation:..., correspondence:...]) into a format 
# author: Name^affiliation,correspondence^ that the Word/ODT templates can handle. 
# This is because the Word/ODT templates do not have the flexibility 
# the other formats do...
require 'paru/filter'

testKey = 'author'
pKey = 'pandocomatic-fileinfo'
nameKey = 'name'
affKey = 'affiliation'
corrKey = 'correspondence'
corrMarker = '\*' # which marker to use, if asterisk you must escape it.
contributionKey = 'equal_contributor'
conMarker = '†'

Paru::Filter.run do
	stop! unless metadata.key?(testKey)
	stop! if metadata.key?(pKey) & !metadata[pKey]['to'].match(/docx|odt/)
	newAuthor = nil
	correspondence = nil
	contribution = nil
	text = ''
	au = metadata[testKey]
	if au.is_a?(Array) && au[0].is_a?(Hash) #just an array of hashes
		newAuthor = Array.new(au.length)
		au.each_with_index do |aut,i|
			unless aut.key?(nameKey) #convert first key to name: key
				values = aut.values[0]
				values['name'] = aut.keys[0]
				aut=values
			end
			if aut.key?(nameKey)
				newAuthor[i] = aut[nameKey].to_s
				if aut.key?(affKey)
          if aut[affKey].is_a?(String) || aut[affKey].is_a?(Fixnum)
          	aff = aut[affKey].to_s
            frag = ''
            a = aff.split(',') #comma seperated values
            a.each do |af|
              if af.match(/^\d+$/)
                frag += '^' + af + '^'
              else
                frag += af + ''
              end
              newAuthor[i] += frag + ' '
            end
          elsif aut['affiliation'].is_a?(Array)
            newAuthor[i] += '^'
            aut[affKey].each { |aff| newAuthor[i] += aff.to_s + ',' }
            newAuthor[i] = newAuthor[i][0..-2] + '^'
          end
        end
				if aut.key?(corrKey)
					if newAuthor[i] =~ /\^$/
						newAuthor[i] = newAuthor[i][0..-2] + corrMarker + '^'
					else
						newAuthor[i] += '^' + corrMarker + '^'
					end
					if aut.key?('email')
						email = aut['email']
					else
						email = aut[corrKey]
					end
					if correspondence.nil?
						correspondence = "[#{email}](#{email})"
					else
						correspondence += ' & ' + "[#{email}](#{email})"
					end
				end
				if aut.key?(contributionKey)
					if newAuthor[i] =~ /\^$/
						newAuthor[i] = newAuthor[i][0..-2] + conMarker + '^'
					else
						newAuthor[i] += '^' + conMarker + '^'
					end
					contribution = '† equal contribution'
				end
			end
		end
	elsif au.is_a?(Hash) #single name: John Doe author
		newAuthor = Array.new(au.length)
		newAuthor[0] = au[nameKey]
	end
	
	metadata[testKey] = newAuthor unless newAuthor.nil?

	unless contribution.nil?
		p = Paru::PandocFilter::Para.new([])
		p.inner_markdown = contribution
		document.prepend(p)
	end
	unless correspondence.nil?
		correspondence = '**' + corrMarker + ' Correspondence**: ' + correspondence + '  \n'
		p = Paru::PandocFilter::Para.new([])
		p.inner_markdown = correspondence
		document.prepend(p)
	end

	stop!
end
